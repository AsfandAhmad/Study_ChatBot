rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId The user ID to compare against.
     * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource);
    }

    /**
     * @description Enforces ownership for all documents under /users/{userId}.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create a profile document at /users/user_abc if request.auth.uid == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a profile document at /users/user_abc.
     * @deny (update) User with UID 'user_xyz' cannot update the document at /users/user_abc.
     * @deny (delete) User with UID 'user_xyz' cannot delete the document at /users/user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership for user profile documents.
     * @path /users/{userId}/profile
     * @allow (create) User with UID 'user_abc' can create a profile document at /users/user_abc/profile if request.auth.uid == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a profile document at /users/user_abc/profile.
     * @deny (update) User with UID 'user_xyz' cannot update the document at /users/user_abc/profile.
     * @deny (delete) User with UID 'user_xyz' cannot delete the document at /users/user_abc/profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/profile {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership for user progress documents.
     * @path /users/{userId}/progress
     * @allow (create) User with UID 'user_abc' can create a progress document at /users/user_abc/progress if request.auth.uid == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a progress document at /users/user_abc/progress.
     * @deny (update) User with UID 'user_xyz' cannot update the document at /users/user_abc/progress.
     * @deny (delete) User with UID 'user_xyz' cannot delete the document at /users/user_abc/progress.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/progress {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership for user notes.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create) User with UID 'user_abc' can create a note at /users/user_abc/notes/note1 if request.auth.uid == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a note at /users/user_abc/notes/note1.
     * @deny (update) User with UID 'user_xyz' cannot update the note at /users/user_abc/notes/note1.
     * @deny (delete) User with UID 'user_xyz' cannot delete the note at /users/user_abc/notes/note1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/notes/{noteId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership for user chats.
     * @path /users/{userId}/chats/{chatId}
     * @allow (create) User with UID 'user_abc' can create a chat at /users/user_abc/chats/chat1 if request.auth.uid == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a chat at /users/user_abc/chats/chat1.
     * @deny (update) User with UID 'user_xyz' cannot update the chat at /users/user_abc/chats/chat1.
     * @deny (delete) User with UID 'user_xyz' cannot delete the chat at /users/user_abc/chats/chat1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/chats/{chatId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership for chat messages.
     * @path /users/{userId}/chats/{chatId}/messages/{messageId}
     * @allow (create) User with UID 'user_abc' can create a message at /users/user_abc/chats/chat1/messages/message1 if request.auth.uid == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a message at /users/user_abc/chats/chat1/messages/message1.
     * @deny (update) User with UID 'user_xyz' cannot update the message at /users/user_abc/chats/chat1/messages/message1.
     * @deny (delete) User with UID 'user_xyz' cannot delete the message at /users/user_abc/chats/chat1/messages/message1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/chats/{chatId}/messages/{messageId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}